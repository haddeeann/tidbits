class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        print('starting array: ', nums)
        least_diff = None
        least_sum = None
        sums_arr = []
        # check to see if outside of range of list
        if target < 0:
            low_sum = nums[0] + nums[1] + nums[2]
            if target < low_sum:
                return low_sum
        elif target > 0:
            r_index = len(nums) - 1
            hi_sum = nums[r_index] + nums[r_index - 1] + nums[r_index - 2]
            if target > hi_sum:
                return hi_sum

        def process_first_row(arr):
            # need to return
            sums_arr = []
            least_diff = None
            least_sum = None
            found = None
            # starting index
            m_index = 1
            middle = arr[m_index]

            r_index = len(arr) - 1
            right = arr[r_index]
            while m_index < r_index:
                sum = left + middle + right
                sums_arr.append(sum)
                diff = abs(sum - target)
                if least_diff is None or diff < least_diff:
                    least_diff = diff
                    least_sum = sum

                if sum > target:
                    # move right index
                    r_index -= 1
                    right = nums[r_index]
                elif sum < target:
                    # move middle index
                    m_index += 1
                    middle = nums[m_index]
                elif sum == target:
                    return [sums_arr, least_diff, least_sum, sum]

            return [sums_arr, least_diff, least_sum, found]

        for l_index, left in enumerate(nums[:-2]):
            if l_index == 0:
                sums_arr, least_diff, least_sum, found = process_first_row(nums)
            if found is not None:
                return found

            if l_index > 0:
                # find diff between this l and previous left
                prev_left = nums[l_index - 1]
                diff_left = abs(left - prev_left)
                # removes the first item in the sums array
                sums_arr.pop(0)
                for i, s in enumerate(sums_arr):
                    sums_arr[i] = s + diff_left
                    if sums_arr[i] == target:
                        return sums_arr[i]
                    diff = abs(sums_arr[i] - target)
                    if diff < least_diff:
                        least_diff = diff
                        least_sum = sums_arr[i]
                print(sums_arr)
        return least_sum


sol = Solution()

test_backup = [
    {
        "n": 1,
        "answer": 2,
        "arr": [-1, 2, 1, -4],
        "t": 1
    },
    {
        "n": 2,
        "answer": 3,
        "arr": [0, 1, 2],
        "t": 3
    },
    {
        "n": 3,
        "answer": 4,
        "arr": [0, 1, 3],
        "t": 3
    },
    {
        "n": 4,
        "answer": None,
        "arr": [-54, -752, 288, 674, -670, 202, 240, 756, 321, 798, -154, 689, -549, 542, -980, -711, 305, -862, -42,
                867, -308, -867, -205, 312, 371, -47, 448, 698, -541, 91, -751, -540, -873, -340, -484, -352, 776, 425,
                701, -194, -482, 880, -163, 486, -929, 673, -431, 539, -415, -889, 415, -700, 818, -2, 896, 212, 794,
                -743, 405, -377, -302, 784, -372, 917, 35, 850, -279, -365, 294, 120, 716, -543, 760, -613, 353, -953,
                -684, -200, 155, 977, -876, -74, 103, 507, 680, 837, -783, -828, -303, -691, -427, -740, -376, -190,
                899, 264, 113, -358, 123, 773, -380, 309, -656, 593, 185, -516, 765, 904, 363, -367, -460, 617, -361,
                -605, -76, 230, -96, -164, -928, -301, 374, -328, -941, -685, -765, -538, 328, -111, -523, 908, -218,
                -145, -199, 11, 348, 705, -682, 6, 344, -964, -112, 632, -255, -882, 713, 572, -997, 976, 614, -527,
                992, -504, 525, -993, -99, 566, 10, 44, -409, 152, 439, -130, 137, 940, -175, 558, 885, 313, 989, 261,
                -52, 338, 144, -856, -631, -927, 112, 918, -563, -689, -868, 36, -842, -148, -180, 310, -981, 129, -213,
                505, -463, -128, 269, -560, -317, 62, 332, 943, 245, -3, -429, 946, -261, 59, 89, 477, 571, -404, -212,
                -580, -147, 278, 996, 281, 855, -849, -725, 779, -138, -723, 866, 286, -570, -299, -638, 403, 985, 411,
                429, 277, -782, -522, 84, -673, -442, 341, 299, 963, -650, -425, -453, -975, -737, -381, 316, 515, -30,
                -804, 808, -300, 644, -825, 722, -364, -438, -132, -775, 203, -643, -198, 127, -201, -526, 175, 750,
                -785, -573, 46, 556, 389, 82, 788, -730, -860, 790, -658, 188, -945, -869, -554, 753, 259, -850, 489,
                60, -786, -242, -595, -258, -984, 74, 534, -503, 907, -731, -346, 530, -619, 646, -329, 227, -692, -473,
                56, -487, 164, 582, 527, -865, 738, -651, -738, -501, -265, 201, -268, -4, 590, -354, -771, -274, -245,
                799, -188, -932, -963, -80, 898, 449, 994, -222, 526, -962, -191, 61, 213, 657, 813, -557, 883, -336,
                -512, 649, -815, 454, -930, -871, 359, -71, -874, -807, 771, 759, 291, 524, -229, 257, 66, -356, -151,
                685, 17, 987, 96, -799, -559, -159, -64, 787, 143, 914, 789, 70, 159, -75, -641, 804, -240, 959, -403,
                851, -450, 481, 267, -690, -424, 840, 893, -566, -140, 432, -182, 73, -896, -531, 565, -298, 114, 735,
                -832, 303, -859, -976, -38, -9, -472, -166, 800, -120, 580, 109, 653, 801, 406, 826, -343, 546, 252,
                491, 755, -114, 950, 424, -494, -988, -659, -942, 340, 468, 487, 504, 912, -430, -388, -693, -333, 803,
                -142, 27, 106, 604, 1, -629, 57, -617, -906, 934, -122, -65, 682, 475, 287, -902, -544, -77, 845, -770,
                488, 537, 715, -576, 282, 58, 761, -405, -94, 520, 821, 360, -470, -327, 937, -244, -853, 631, 141,
                -239, 570, 603, 254, 19, -284, -156, -22, 926, -247, -186, 495, 158, -939, 861, 382, 595, -310, 894,
                -66, 605, 48, -456, 660, 547, 503, 49, -745],
        "t": -6888
    }
]
# inputs
test_set = [
    {
        "n": 4,
        "answer": None,
        "arr": [-54, -752, 288, 674, -670, 202, 240, 756, 321, 798, -154, 689, -549, 542, -980, -711, 305, -862, -42,
                867, -308, -867, -205, 312, 371, -47, 448, 698, -541, 91, -751, -540, -873, -340, -484, -352, 776, 425,
                701, -194, -482, 880, -163, 486, -929, 673, -431, 539, -415, -889, 415, -700, 818, -2, 896, 212, 794,
                -743, 405, -377, -302, 784, -372, 917, 35, 850, -279, -365, 294, 120, 716, -543, 760, -613, 353, -953,
                -684, -200, 155, 977, -876, -74, 103, 507, 680, 837, -783, -828, -303, -691, -427, -740, -376, -190,
                899, 264, 113, -358, 123, 773, -380, 309, -656, 593, 185, -516, 765, 904, 363, -367, -460, 617, -361,
                -605, -76, 230, -96, -164, -928, -301, 374, -328, -941, -685, -765, -538, 328, -111, -523, 908, -218,
                -145, -199, 11, 348, 705, -682, 6, 344, -964, -112, 632, -255, -882, 713, 572, -997, 976, 614, -527,
                992, -504, 525, -993, -99, 566, 10, 44, -409, 152, 439, -130, 137, 940, -175, 558, 885, 313, 989, 261,
                -52, 338, 144, -856, -631, -927, 112, 918, -563, -689, -868, 36, -842, -148, -180, 310, -981, 129, -213,
                505, -463, -128, 269, -560, -317, 62, 332, 943, 245, -3, -429, 946, -261, 59, 89, 477, 571, -404, -212,
                -580, -147, 278, 996, 281, 855, -849, -725, 779, -138, -723, 866, 286, -570, -299, -638, 403, 985, 411,
                429, 277, -782, -522, 84, -673, -442, 341, 299, 963, -650, -425, -453, -975, -737, -381, 316, 515, -30,
                -804, 808, -300, 644, -825, 722, -364, -438, -132, -775, 203, -643, -198, 127, -201, -526, 175, 750,
                -785, -573, 46, 556, 389, 82, 788, -730, -860, 790, -658, 188, -945, -869, -554, 753, 259, -850, 489,
                60, -786, -242, -595, -258, -984, 74, 534, -503, 907, -731, -346, 530, -619, 646, -329, 227, -692, -473,
                56, -487, 164, 582, 527, -865, 738, -651, -738, -501, -265, 201, -268, -4, 590, -354, -771, -274, -245,
                799, -188, -932, -963, -80, 898, 449, 994, -222, 526, -962, -191, 61, 213, 657, 813, -557, 883, -336,
                -512, 649, -815, 454, -930, -871, 359, -71, -874, -807, 771, 759, 291, 524, -229, 257, 66, -356, -151,
                685, 17, 987, 96, -799, -559, -159, -64, 787, 143, 914, 789, 70, 159, -75, -641, 804, -240, 959, -403,
                851, -450, 481, 267, -690, -424, 840, 893, -566, -140, 432, -182, 73, -896, -531, 565, -298, 114, 735,
                -832, 303, -859, -976, -38, -9, -472, -166, 800, -120, 580, 109, 653, 801, 406, 826, -343, 546, 252,
                491, 755, -114, 950, 424, -494, -988, -659, -942, 340, 468, 487, 504, 912, -430, -388, -693, -333, 803,
                -142, 27, 106, 604, 1, -629, 57, -617, -906, 934, -122, -65, 682, 475, 287, -902, -544, -77, 845, -770,
                488, 537, 715, -576, 282, 58, 761, -405, -94, 520, 821, 360, -470, -327, 937, -244, -853, 631, 141,
                -239, 570, 603, 254, 19, -284, -156, -22, 926, -247, -186, 495, 158, -939, 861, 382, 595, -310, 894,
                -66, 605, 48, -456, 660, 547, 503, 49, -745],
        "t": 6888
    }
]

# [-997, -993, -988, -984, -981, -980, -976, -975, -964, -963, -962, -953, -945, -942, -941, -939, -932, -930, -929, -928, -927, -906, -902, -896, -889, -882, -876, -874, -873, -871, -869, -868, -867, -865, -862, -860, -859, -856, -853, -850, -849, -842, -832, -828, -825, -815, -807, -804, -799, -786, -785, -783, -782, -775, -771, -770, -765, -752, -751, -745, -743, -740, -738, -737, -731, -730, -725, -723, -711, -700, -693, -692, -691, -690, -689, -685, -684, -682, -673, -670, -659, -658, -656, -651, -650, -643, -641, -638, -631, -629, -619, -617, -613, -605, -595, -580, -576, -573, -570, -566...



for item in test_set:
    result = sol.threeSumClosest(item["arr"], item["t"])
    if item["answer"] == result:
        print(f"test {item['n']} has passed")
    elif item["answer"] is None:
        print(f"we're not sure what the answer is, but the result is {result}")
    else:
        print(f"test {item['n']} FAILED")
